{
	"info": {
		"_postman_id": "7c0260fb-8056-4ecf-85fb-4a5f19bf43eb",
		"name": "Menu Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Class Tests",
			"item": [
				{
					"name": "Add class",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b1ed6139-47d7-4348-951b-486695cd08ed",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check classe's parameters\", function () {\r",
									"    var category = pm.response.json();\r",
									"    pm.expect(category.name).to.eql(\"milk\");\r",
									"    pm.expect(category.isSingle).to.eql(false);\r",
									"    pm.expect(category.isRequired).to.eql(true);\r",
									"    pm.expect(category.id).not.eql(null);\r",
									"\r",
									"    pm.environment.set(\"CATEGORY_ID\", category.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"milk\",\r\n    \"isSingle\": false,\r\n    \"isRequired\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/menu-service/w/classes",
							"host": [
								"{{URL}}"
							],
							"path": [
								"menu-service",
								"w",
								"classes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit class",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "545b7290-7989-4b5e-bbf8-3ed75e715977",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check classe's parameters \", function () {\r",
									"    var category = pm.response.json();\r",
									"    pm.expect(category.name).to.eql(\"coffee\");\r",
									"    pm.expect(category.isSingle).to.eql(false);\r",
									"    pm.expect(category.isRequired).to.eql(true);\r",
									"    pm.expect(category.id).to.eql(pm.environment.get(\"CATEGORY_ID\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{CATEGORY_ID}},\r\n    \"name\": \"coffee\",\r\n    \"isSingle\": false,\r\n    \"isRequired\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/menu-service/w/classes",
							"host": [
								"{{URL}}"
							],
							"path": [
								"menu-service",
								"w",
								"classes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get classes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f0502832-29b9-42bc-8aff-4147a54ab852",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check classe's parameters\", function () {\r",
									"    const id = pm.environment.get(\"CATEGORY_ID\");\r",
									"    var category = pm.response.json().find( category => {\r",
									"        return category.id == id\r",
									"    });\r",
									"    pm.expect(category.name).to.eql(\"coffee\");\r",
									"    pm.expect(category.isSingle).to.eql(false);\r",
									"    pm.expect(category.isRequired).to.eql(true);\r",
									"    pm.expect(category.id).to.eql(id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/menu-service/w/classes",
							"host": [
								"{{URL}}"
							],
							"path": [
								"menu-service",
								"w",
								"classes"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get class",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f013f72-d09f-4fb0-94f2-411da2b12027",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check classe's parameters \", function () {\r",
									"    var category = pm.response.json();\r",
									"    pm.expect(category.name).to.eql(\"coffee\");\r",
									"    pm.expect(category.isSingle).to.eql(false);\r",
									"    pm.expect(category.isRequired).to.eql(true);\r",
									"    pm.expect(category.id).to.eql(pm.environment.get(\"CATEGORY_ID\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/menu-service/w/classes/{{CATEGORY_ID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"menu-service",
								"w",
								"classes",
								"{{CATEGORY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete class",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e12b1168-4d96-416a-9c75-3305e45baf01",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/menu-service/w/classes/{{CATEGORY_ID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"menu-service",
								"w",
								"classes",
								"{{CATEGORY_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete nonexistent class",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "101aa94f-6d5e-4614-80b8-686ae1353741",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/menu-service/w/classes/{{CATEGORY_ID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"menu-service",
								"w",
								"classes",
								"{{CATEGORY_ID}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Component Test",
			"item": [
				{
					"name": "Add component",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "29edd0e7-9e25-4437-aba5-9235723cb3b6",
								"exec": [
									"const category = {\r",
									"    \"name\":\"milk\",\r",
									"\t\"isSingle\":\"false\",\r",
									"\t\"isRequired\":\"true\"\r",
									"}\r",
									"\r",
									"var request = {\r",
									"    url: pm.environment.get('URL') + \"/menu-service/w/classes\",\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"content-type\": \"application/json\",\r",
									"        \"accept\": \"application/json\",\r",
									"        \"authorization\": \"Bearer \" + pm.globals.get('ACCESS_TOKEN')\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(category)\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(request,\r",
									"function (err, response) {\r",
									"    const category = response.json();\r",
									"    pm.environment.set('CATEGORY', JSON.stringify(category));\r",
									"    pm.environment.set('CATEGORY_ID', category.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bffae88f-64ee-438c-90d2-848b740d6238",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Parameters check\", function () {\r",
									"    var component = pm.response.json();\r",
									"    var category = JSON.parse(pm.environment.get('CATEGORY'));\r",
									"    pm.expect(component.category.name).to.eql(category.name);\r",
									"    pm.expect(component.category.isSingle).to.eql(category.isSingle);\r",
									"    pm.expect(component.category.isRequired).to.eql(category.isRequired);\r",
									"    pm.expect(component.category.id).to.eql(category.id);\r",
									"    pm.expect(component.name).to.eql(\"cow's milk\");\r",
									"    pm.expect(component.measure).to.eql(\"ML\");\r",
									"    pm.expect(component.id).not.eql(null);\r",
									"  \r",
									"    pm.environment.set('ID', component.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t \"categoryId\": {{CATEGORY_ID}}, \n\t \"name\":\"cow's milk\",\n\t \"measure\":\"ML\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/menu-service/w/components",
							"host": [
								"{{URL}}"
							],
							"path": [
								"menu-service",
								"w",
								"components"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit component",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "358e019f-f8fc-4ced-b58b-042e35cef0a8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Parameters check\", function () {\r",
									"    const component = pm.response.json();\r",
									"    const category = JSON.parse(pm.environment.get(\"CATEGORY\")); \r",
									"    pm.expect(component.category.name).to.eql(category.name);\r",
									"    pm.expect(component.category.isSingle).to.eql(category.isSingle);\r",
									"    pm.expect(component.category.isRequired).to.eql(category.isRequired);\r",
									"    pm.expect(component.name).to.eql(\"arabica\");\r",
									"    pm.expect(component.measure).to.eql(\"GR\");\r",
									"    pm.expect(component.id).to.eql(pm.environment.get('ID'));\r",
									"    pm.expect(component.category.id).to.eql(category.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ed5feb37-ee27-48e4-943a-8d879dfef7ae",
								"exec": [
									"const categoryId = pm.environment.get(\"CATEGORY_ID\")\r",
									"\r",
									"var category = {\r",
									"    \"id\": categoryId,\r",
									"    \"name\":\"coffee\",\r",
									"\t\"isSingle\":\"false\",\r",
									"\t\"isRequired\":\"true\"\r",
									"}\r",
									"\r",
									"var request = {\r",
									"    url: pm.environment.get('URL') + \"/menu-service/w/classes\",\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"content-type\": \"application/json\",\r",
									"        \"accept\": \"application/json\",\r",
									"        \"authorization\": \"Bearer \" + pm.globals.get('ACCESS_TOKEN')\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(category)\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(request,\r",
									"function (err, response) {\r",
									"    const category = response.json();\r",
									"    pm.environment.set('CATEGORY', JSON.stringify(category));\r",
									"    pm.environment.set('CATEGORY_ID', category.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{ID}},\r\n\t\"categoryId\": {{CATEGORY_ID}},\r\n\t\"name\":\"arabica\",\r\n\t\"measure\":\"GR\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/menu-service/w/components",
							"host": [
								"{{URL}}"
							],
							"path": [
								"menu-service",
								"w",
								"components"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get components",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7b54278a-13b6-4fe0-bc06-6d1425b1e239",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Parametrs check\", function () {\r",
									"    const id = pm.environment.get(\"ID\");\r",
									"    var component = pm.response.json().find( component => {\r",
									"        return component.id == id\r",
									"    });\r",
									"\r",
									"    const category = JSON.parse(pm.environment.get(\"CATEGORY\"));\r",
									"    pm.expect(component.category.name).to.eql(category.name);\r",
									"    pm.expect(component.category.isSingle).to.eql(category.isSingle);\r",
									"    pm.expect(component.category.isRequired).to.eql(category.isRequired);\r",
									"    pm.expect(component.category.id).to.eql(category.id);\r",
									"    pm.expect(component.name).to.eql(\"arabica\");\r",
									"    pm.expect(component.measure).to.eql(\"GR\");\r",
									"    pm.expect(component.id).to.eql(id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/menu-service/w/components",
							"host": [
								"{{URL}}"
							],
							"path": [
								"menu-service",
								"w",
								"components"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get component",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ce6a0a21-94f4-4df3-ab86-5e7447ae93c7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Parametrs check\", function () {\r",
									"    const id = pm.environment.get(\"ID\");\r",
									"    var component = pm.response.json();\r",
									"    const category = JSON.parse(pm.environment.get(\"CATEGORY\"));\r",
									"\r",
									"    pm.expect(component.category.name).to.eql(category.name);\r",
									"    pm.expect(component.category.isSingle).to.eql(category.isSingle);\r",
									"    pm.expect(component.category.isRequired).to.eql(category.isRequired);\r",
									"    pm.expect(component.name).to.eql(\"arabica\");\r",
									"    pm.expect(component.measure).to.eql(\"GR\");\r",
									"    pm.expect(component.id).to.eql(id);\r",
									"    pm.expect(component.category.id).to.eql(category.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/menu-service/w/components/{{ID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"menu-service",
								"w",
								"components",
								"{{ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete component",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "40cc9ce2-edde-466c-9652-e5082d5a6e31",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/menu-service/w/components/{{ID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"menu-service",
								"w",
								"components",
								"{{ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete nonexistent component",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43914e22-69b6-4ee9-9c70-642eaed85db4",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3623ff03-4a4c-4b69-8086-6f878da164ae",
								"exec": [
									"const categoryId = pm.environment.get(\"CATEGORY_ID\")\r",
									"\r",
									"var request = {\r",
									"    url: pm.environment.get('URL') + \"/menu-service/w/classes/\" + categoryId,\r",
									"    header: {\r",
									"        \"authorization\": \"Bearer \" + pm.globals.get('ACCESS_TOKEN')\r",
									"    },\r",
									"    method: \"DELETE\"\r",
									"}\r",
									"\r",
									"pm.sendRequest(request,\r",
									"function (err, response) {\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/menu-service/w/components/{{ID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"menu-service",
								"w",
								"components",
								"{{ID}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "You must store tests with component here!",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Beverage Tests",
			"item": [
				{
					"name": "Add Beverage",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c5f5c578-352c-479a-b02e-b5a6a00fa05d",
								"exec": [
									"var categories = [];\r",
									"categories.push({\r",
									"    \"name\": \"milk\",\r",
									"    \"isSingle\": false,\r",
									"    \"isRequired\": true\r",
									"});\r",
									"categories.push({\r",
									"    \"name\": \"coffee\",\r",
									"    \"isSingle\": false,\r",
									"    \"isRequired\": true\r",
									"});\r",
									"categories.push({\r",
									"    \"name\": \"cup\",\r",
									"    \"isSingle\": true,\r",
									"    \"isRequired\": true\r",
									"})\r",
									"\r",
									"var classRequest = {\r",
									"    url: pm.environment.get('URL') + \"/menu-service/w/classes\",\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"content-type\": \"application/json\",\r",
									"        \"accept\": \"application/json\",\r",
									"        \"authorization\": \"Bearer \" + pm.globals.get('ACCESS_TOKEN')\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: ''\r",
									"    }\r",
									"}\r",
									"\r",
									"var componentRequest = {\r",
									"    url: pm.environment.get('URL') + \"/menu-service/w/components\",\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"content-type\": \"application/json\",\r",
									"        \"accept\": \"application/json\",\r",
									"        \"authorization\": \"Bearer \" + pm.globals.get('ACCESS_TOKEN')\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: ''\r",
									"    }\r",
									"}\r",
									"\r",
									"classRequest.body.raw = JSON.stringify(categories[0]);\r",
									"pm.sendRequest(classRequest, function(err, response) {\r",
									"    const category = response.json();\r",
									"    const component = {\r",
									"        \"categoryId\": category.id,\r",
									"        \"name\": \"cow's milk\",\r",
									"        \"measure\": \"ML\"\r",
									"    }\r",
									"\r",
									"    componentRequest.body.raw = JSON.stringify(component);\r",
									"    pm.sendRequest(componentRequest, function(err, response) {\r",
									"        const component = response.json();\r",
									"        pm.environment.set('COMPONENT', JSON.stringify(component));\r",
									"        pm.environment.set(\"COMPONENT_ID\", component.id);\r",
									"\r",
									"        classRequest.body.raw = JSON.stringify(categories[1]);\r",
									"        pm.sendRequest(classRequest, function(err, response) {\r",
									"            const category = response.json();\r",
									"            const component = {\r",
									"                \"categoryId\": category.id,\r",
									"                \"name\": \"coffee\",\r",
									"                \"measure\": \"GR\"\r",
									"            }\r",
									"            componentRequest.body.raw = JSON.stringify(component);\r",
									"            pm.sendRequest(componentRequest, function(err, response) {\r",
									"                const component = response.json();\r",
									"                pm.environment.set('COMPONENT2', JSON.stringify(component));\r",
									"                pm.environment.set(\"COMPONENT_ID_2\", component.id);\r",
									"                console.log(component);\r",
									"\r",
									"                classRequest.body.raw = JSON.stringify(categories[2]);\r",
									"                pm.sendRequest(classRequest, function(err, response) {\r",
									"                    const category = response.json();\r",
									"                    pm.environment.set('CATEGORY_ID', category.id); \r",
									"                    const component = {\r",
									"                        \"categoryId\": category.id,\r",
									"                        \"name\": \"cup/0.2\",\r",
									"                        \"measure\": \"PIECE\"\r",
									"                    }\r",
									"\r",
									"                    componentRequest.body.raw = JSON.stringify(component);\r",
									"                    pm.sendRequest(componentRequest, function(err, response) {\r",
									"                        const component = response.json();\r",
									"                        pm.environment.set('COMPONENT3', JSON.stringify(component));\r",
									"                        pm.environment.set(\"COMPONENT_ID_3\", component.id);\r",
									"                    });\r",
									"                });\r",
									"            });\r",
									"        });\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ff6b90da-cda5-4025-b12c-74d68c628ee3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Components test\", function () {\r",
									"    function checkComponent(newComponent, component) {\r",
									"        pm.expect(newComponent.component.category.name).to.eql(component.category.name);\r",
									"        pm.expect(newComponent.component.category.isSingle).to.eql(component.category.isSingle);\r",
									"        pm.expect(newComponent.component.category.isRequired).to.eql(component.category.isRequired);\r",
									"        pm.expect(newComponent.component.name).to.eql(component.name);\r",
									"        pm.expect(newComponent.component.measure).to.eql(component.measure);\r",
									"        pm.expect(newComponent.component.id).to.eql(component.id);\r",
									"        pm.expect(newComponent.component.category.id).to.eql(component.category.id);\r",
									"    }\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"    var newComponent = jsonData.recipe.pop();\r",
									"    var component = JSON.parse(pm.environment.get(\"COMPONENT3\"));\r",
									"\r",
									"    checkComponent(newComponent, component);\r",
									"    pm.expect(newComponent.quantity).to.eql(1);\r",
									"\r",
									"    newComponent = jsonData.recipe.pop();\r",
									"    component = JSON.parse(pm.environment.get(\"COMPONENT2\"));\r",
									"\r",
									"    checkComponent(newComponent, component);\r",
									"    pm.expect(newComponent.quantity).to.eql(50);\r",
									"\r",
									"    newComponent = jsonData.recipe.pop();\r",
									"    component = JSON.parse(pm.environment.get(\"COMPONENT\"));\r",
									"\r",
									"    checkComponent(newComponent, component);\r",
									"    pm.expect(newComponent.quantity).to.eql(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Beverage parameters check\", function () {\r",
									"    var beverage = pm.response.json();\r",
									"    pm.expect(beverage.beverageName).to.eql(\"Espresso with milk\");\r",
									"    pm.expect(beverage.price).to.eql(200);\r",
									"    pm.expect(beverage.customerId).to.eql(null);\r",
									"    pm.expect(beverage.id).not.eql(null);\r",
									"    pm.environment.set('ID', beverage.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Espresso with milk\",\r\n    \"recipe\": [\r\n        {\r\n        \"componentId\": {{COMPONENT_ID}},\r\n        \"quantity\": 100\r\n        },\r\n        {\r\n        \"componentId\": {{COMPONENT_ID_2}},\r\n        \"quantity\": 50\r\n        },\r\n        {\r\n        \"componentId\": {{COMPONENT_ID_3}},\r\n        \"quantity\": 1\r\n        }\r\n    ],\r\n    \"price\": 200\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/menu-service/w/beverages",
							"host": [
								"{{URL}}"
							],
							"path": [
								"menu-service",
								"w",
								"beverages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Beverage",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2d28a729-5ad3-456a-b5fb-ae43726de3f6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Components test\", function () {\r",
									"    function checkComponent(newComponent, component) {\r",
									"        pm.expect(newComponent.component.category.name).to.eql(component.category.name);\r",
									"        pm.expect(newComponent.component.category.isSingle).to.eql(component.category.isSingle);\r",
									"        pm.expect(newComponent.component.category.isRequired).to.eql(component.category.isRequired);\r",
									"        pm.expect(newComponent.component.name).to.eql(component.name);\r",
									"        pm.expect(newComponent.component.measure).to.eql(component.measure);\r",
									"        pm.expect(newComponent.component.id).to.eql(component.id);\r",
									"        pm.expect(newComponent.component.category.id).to.eql(component.category.id);\r",
									"    }\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"    var component = JSON.parse(pm.environment.get(\"COMPONENT3\"));\r",
									"    var newComponent = jsonData.recipe.find( recipeComponent => {\r",
									"        return recipeComponent.component.name == component.name; \r",
									"    });;\r",
									"    \r",
									"\r",
									"    checkComponent(newComponent, component);\r",
									"    pm.expect(newComponent.quantity).to.eql(1);\r",
									"\r",
									"    component = JSON.parse(pm.environment.get(\"COMPONENT2\"));\r",
									"    newComponent = jsonData.recipe.find( recipeComponent => {\r",
									"        return recipeComponent.component.name == component.name; \r",
									"    });\r",
									"\r",
									"    checkComponent(newComponent, component);\r",
									"    pm.expect(newComponent.quantity).to.eql(50);\r",
									"\r",
									"    component = JSON.parse(pm.environment.get(\"COMPONENT\"));\r",
									"    newComponent = jsonData.recipe.find( recipeComponent => {\r",
									"        return recipeComponent.component.name == component.name; \r",
									"    });\r",
									"\r",
									"    checkComponent(newComponent, component);\r",
									"    pm.expect(newComponent.quantity).to.eql(100);\r",
									"});\r",
									"\r",
									"pm.test(\"Beverage parameters check\", function () {\r",
									"    var beverage = pm.response.json();\r",
									"    pm.expect(beverage.beverageName).to.eql(\"Espresso with milk\");\r",
									"    pm.expect(beverage.price).to.eql(200);\r",
									"    pm.expect(beverage.customerId).to.eql(null);\r",
									"    pm.expect(beverage.id).to.eql(pm.environment.get(\"ID\"));\r",
									"\r",
									"    console.log(beverage.id);\r",
									"    pm.environment.set(\"ID\", beverage.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/menu-service/w/beverages/{{ID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"menu-service",
								"w",
								"beverages",
								"{{ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Beverage",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "65d91a76-6001-4bf7-8d86-d97b85f958f8",
								"exec": [
									"var component = {\r",
									"    \"id\": pm.environment.get('COMPONENT_ID_3'),\r",
									"    \"categoryId\": pm.environment.get('CATEGORY_ID'),\r",
									"\t\"name\":\"cup 0.5\",\r",
									"\t\"measure\":\"PIECE\"\r",
									"}\r",
									"\r",
									"var request = {\r",
									"    url: pm.environment.get('URL') + \"/menu-service/w/components\",\r",
									"    method: \"POST\",\r",
									"    header: {\r",
									"        \"content-type\": \"application/json\",\r",
									"        \"accept\": \"application/json\",\r",
									"        \"authorization\": \"Bearer \" + pm.globals.get('ACCESS_TOKEN')\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(component)\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(request,\r",
									"function (err, response) {\r",
									"    const component = response.json();\r",
									"    pm.environment.set('COMPONENT3', JSON.stringify(component));\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1f043996-39b1-4bcb-a788-b008b77b6423",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Components test\", function () {\r",
									"    function checkComponent(newComponent, component) {\r",
									"        pm.expect(newComponent.component.category.name).to.eql(component.category.name);\r",
									"        pm.expect(newComponent.component.category.isSingle).to.eql(component.category.isSingle);\r",
									"        pm.expect(newComponent.component.category.isRequired).to.eql(component.category.isRequired);\r",
									"        pm.expect(newComponent.component.name).to.eql(component.name);\r",
									"        pm.expect(newComponent.component.measure).to.eql(component.measure);\r",
									"        pm.expect(newComponent.component.id).to.eql(component.id);\r",
									"        pm.expect(newComponent.component.category.id).to.eql(component.category.id);\r",
									"    }\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"    var newComponent = jsonData.recipe.pop();\r",
									"    var component = JSON.parse(pm.environment.get(\"COMPONENT3\"));\r",
									"\r",
									"    checkComponent(newComponent, component);\r",
									"    pm.expect(newComponent.quantity).to.eql(1);\r",
									"\r",
									"    newComponent = jsonData.recipe.pop();\r",
									"    component = JSON.parse(pm.environment.get(\"COMPONENT2\"));\r",
									"\r",
									"    checkComponent(newComponent, component);\r",
									"    pm.expect(newComponent.quantity).to.eql(100);\r",
									"\r",
									"    newComponent = jsonData.recipe.pop();\r",
									"    component = JSON.parse(pm.environment.get(\"COMPONENT\"));\r",
									"\r",
									"    checkComponent(newComponent, component);\r",
									"    pm.expect(newComponent.quantity).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Beverage parameters check\", function () {\r",
									"    var beverage = pm.response.json();\r",
									"    pm.expect(beverage.beverageName).to.eql(\"Espresso with milk\");\r",
									"    pm.expect(beverage.price).to.eql(200);\r",
									"    pm.expect(beverage.customerId).to.eql(null);\r",
									"    pm.environment.set(\"ID\", beverage.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{ID}},\r\n    \"name\": \"Espresso with milk\",\r\n    \"recipe\": [\r\n        {\r\n        \"componentId\": {{COMPONENT_ID}},\r\n        \"quantity\": 200\r\n        },\r\n        {\r\n        \"componentId\": {{COMPONENT_ID_2}},\r\n        \"quantity\": 100\r\n        },\r\n        {\r\n        \"componentId\": {{COMPONENT_ID_3}},\r\n        \"quantity\": 1\r\n        }\r\n    ],\r\n    \"price\": 200\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/menu-service/w/beverages",
							"host": [
								"{{URL}}"
							],
							"path": [
								"menu-service",
								"w",
								"beverages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Beverage",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "45064da9-b280-4850-9fae-92e1fe66d20f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/menu-service/w/beverages/{{ID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"menu-service",
								"w",
								"beverages",
								"{{ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete nonexistent  beverage",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "35c760f4-9291-42eb-9f40-f19a373ad40a",
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/menu-service/w/beverages/{{ID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"menu-service",
								"w",
								"beverages",
								"{{ID}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "You must store tests with beverage here!",
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{ACCESS_TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "2d6dd96e-778c-4346-ac5a-84d3b526bcf6",
				"type": "text/javascript",
				"exec": [
					"pm.sendRequest({",
					"    url: pm.environment.get('URL') + \"/auth/w/auth/login\",",
					"    method: \"POST\",",
					"    header: {",
					"        \"content-type\": \"application/json\",",
					"        \"accept\": \"application/json\",",
					"    },",
					"    body: {",
					"        mode: 'raw',",
					"        raw: JSON.stringify({ ",
					"            email: pm.environment.get('USERNAME'), ",
					"            password: pm.environment.get('PASSWORD') ",
					"        })",
					"    }",
					"},",
					"function (err, response) {",
					"    const access_token = response.headers.get(\"Authorization\");",
					"    pm.globals.set('ACCESS_TOKEN', access_token.substring(7));",
					"});",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d59869ba-b4a8-4042-8670-6a62640930fe",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}